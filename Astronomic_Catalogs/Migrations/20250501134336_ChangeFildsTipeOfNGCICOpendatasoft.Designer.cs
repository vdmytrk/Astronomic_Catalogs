// <auto-generated />
using System;
using Astronomic_Catalogs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Astronomic_Catalogs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250501134336_ChangeFildsTipeOfNGCICOpendatasoft")]
    partial class ChangeFildsTipeOfNGCICOpendatasoft
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountRegisterEmailSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRegisterEmailSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.CollinderCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AngDiameter")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Ang_Diameter");

                    b.Property<float?>("AngDiameterNew")
                        .HasColumnType("real")
                        .HasColumnName("Ang_Diameter_Max");

                    b.Property<float?>("AppMag")
                        .HasColumnType("real")
                        .HasColumnName("App_Mag");

                    b.Property<string>("AppMagFlag")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("App_Mag_Flag");

                    b.Property<string>("Class")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Constellation")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CountStars")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("CountStarsToFinding")
                        .HasColumnType("int")
                        .HasColumnName("CountStars_ToFinding");

                    b.Property<string>("Declination")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Declination");

                    b.Property<int>("DeclinationD")
                        .HasColumnType("int")
                        .HasColumnName("Declination_D");

                    b.Property<int>("DeclinationM")
                        .HasColumnType("int")
                        .HasColumnName("Declination_M");

                    b.Property<float>("DeclinationS")
                        .HasColumnType("real")
                        .HasColumnName("Declination_S");

                    b.Property<string>("NS")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("NamberName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Namber_name");

                    b.Property<string>("NameOtherCat")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("PageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(133);

                    b.Property<int?>("PageNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("RightAscension")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Right_ascension");

                    b.Property<int>("RightAscensionH")
                        .HasColumnType("int")
                        .HasColumnName("Right_ascension_H");

                    b.Property<float>("RightAscensionM")
                        .HasColumnType("real")
                        .HasColumnName("Right_ascension_M");

                    b.Property<float>("RightAscensionS")
                        .HasColumnType("real")
                        .HasColumnName("Right_ascension_S");

                    b.HasKey("Id");

                    b.ToTable("CollinderCatalog", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.Connection.ActualDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualDateProperty")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DateTable", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.Connection.TestConnectionForNLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TestConnectionForNLog", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.Constellation", b =>
                {
                    b.Property<string>("ShortName")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("Short_name");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("English_name");

                    b.Property<string>("LatineNameGenitiveCase")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Latine_name_Genitive_case");

                    b.Property<string>("LatineNameNominativeCase")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Latine_name_Nominative_case");

                    b.Property<int>("NumberStars")
                        .HasColumnType("int")
                        .HasColumnName("Number_stars");

                    b.Property<string>("UkraineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Ukraine_name")
                        .UseCollation("Cyrillic_General_CI_AS");

                    b.HasKey("ShortName");

                    b.ToTable("Constellation", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.DatabaseInitialization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("Is_CollinderCatalog_Temporarily_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_Constellation_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NGC2000_UKTemporarilySource_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NGC2000_UKTemporarily_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NGCICOpendatasoft_Source_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NGCWikipedia_ExtensionTemporarilySource_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NGCWikipedia_TemporarilySource_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_NameObject_Executed")
                        .HasColumnType("bit");

                    b.Property<bool>("Is_SourceType_Executed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DatabaseInitialization");
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.LogProcFunc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorSeverity")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorState")
                        .HasColumnType("int");

                    b.Property<string>("FuncProc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FuncProc");

                    b.Property<int>("Line")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("LogProcFunc", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.NASAExoplanetCatalog", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RowId"));

                    b.Property<int>("AstFlag")
                        .HasColumnType("int")
                        .HasColumnName("Ast_flag");

                    b.Property<int>("CbFlag")
                        .HasColumnType("int")
                        .HasColumnName("Cb_flag");

                    b.Property<float>("Dec")
                        .HasColumnType("real")
                        .HasColumnName("Dec");

                    b.Property<string>("Decstr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Decstr");

                    b.Property<int>("DefaultFlag")
                        .HasColumnType("int")
                        .HasColumnName("Default_flag");

                    b.Property<string>("DiscFacility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Disc_facility");

                    b.Property<string>("DiscInstrument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Disc_instrument");

                    b.Property<string>("DiscLocale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Disc_locale");

                    b.Property<DateTime>("DiscPubDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("Disc_pubdate");

                    b.Property<string>("DiscRefName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Disc_refname");

                    b.Property<string>("DiscTelescope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Disc_telescope");

                    b.Property<int>("DiscYear")
                        .HasColumnType("int")
                        .HasColumnName("Disc_year");

                    b.Property<string>("DiscoveryMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Discoverymethod");

                    b.Property<int>("DkinFlag")
                        .HasColumnType("int")
                        .HasColumnName("Dkin_flag");

                    b.Property<float>("Elat")
                        .HasColumnType("real");

                    b.Property<float>("Elon")
                        .HasColumnType("real");

                    b.Property<int>("EtvFlag")
                        .HasColumnType("int")
                        .HasColumnName("Etv_flag");

                    b.Property<string>("GaiaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Gaia_id");

                    b.Property<float>("Glat")
                        .HasColumnType("real");

                    b.Property<float>("Glon")
                        .HasColumnType("real");

                    b.Property<string>("HdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hd_name");

                    b.Property<string>("HipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hip_name");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImaFlag")
                        .HasColumnType("int")
                        .HasColumnName("Ima_flag");

                    b.Property<int>("MicroFlag")
                        .HasColumnType("int")
                        .HasColumnName("Micro_flag");

                    b.Property<int>("ObmFlag")
                        .HasColumnType("int")
                        .HasColumnName("Obm_flag");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<float>("PlBmassJ")
                        .HasColumnType("real")
                        .HasColumnName("Pl_bmassj");

                    b.Property<float>("PlBmassJErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_bmassjerr1");

                    b.Property<float>("PlBmassJErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_bmassjerr2");

                    b.Property<int>("PlBmassJLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_bmassjlim");

                    b.Property<string>("PlBmassProv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pl_bmassprov");

                    b.Property<float>("PlBmasse")
                        .HasColumnType("real")
                        .HasColumnName("Pl_bmasse");

                    b.Property<float>("PlBmasseErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_bmasseerr1");

                    b.Property<float>("PlBmasseErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_bmasseerr2");

                    b.Property<int>("PlBmasseLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_bmasselim");

                    b.Property<float>("PlCMassJ")
                        .HasColumnType("real")
                        .HasColumnName("Pl_cmassj");

                    b.Property<float>("PlCMassJErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_cmassjerr1");

                    b.Property<float>("PlCMassJErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_cmassjerr2");

                    b.Property<int>("PlCMassJLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_cmassjlim");

                    b.Property<float>("PlCMasse")
                        .HasColumnType("real")
                        .HasColumnName("Pl_cmasse");

                    b.Property<float>("PlCMasseErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_cmasseerr1");

                    b.Property<float>("PlCMasseErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_cmasseerr2");

                    b.Property<int>("PlCMasseLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_cmasselim");

                    b.Property<int>("PlControvFlag")
                        .HasColumnType("int")
                        .HasColumnName("Pl_controv_flag");

                    b.Property<float>("PlDens")
                        .HasColumnType("real")
                        .HasColumnName("Pl_dens");

                    b.Property<float>("PlDensErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_denserr1");

                    b.Property<float>("PlDensErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_denserr2");

                    b.Property<int>("PlDensLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_denslim");

                    b.Property<float>("PlEqt")
                        .HasColumnType("real")
                        .HasColumnName("Pl_eqt");

                    b.Property<float>("PlEqtErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_eqterr1");

                    b.Property<float>("PlEqtErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_eqterr2");

                    b.Property<int>("PlEqtLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_eqtlim");

                    b.Property<float>("PlImppar")
                        .HasColumnType("real")
                        .HasColumnName("Pl_imppar");

                    b.Property<float>("PlImpparErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_impparerr1");

                    b.Property<float>("PlImpparErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_impparerr2");

                    b.Property<int>("PlImpparLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_impparlim");

                    b.Property<float>("PlInsol")
                        .HasColumnType("real")
                        .HasColumnName("Pl_insol");

                    b.Property<float>("PlInsolErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_insolerr1");

                    b.Property<float>("PlInsolErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_insolerr2");

                    b.Property<int>("PlInsolLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_insollim");

                    b.Property<string>("PlLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pl_letter");

                    b.Property<float>("PlMassJ")
                        .HasColumnType("real")
                        .HasColumnName("Pl_massj");

                    b.Property<float>("PlMassJErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_massjerr1");

                    b.Property<float>("PlMassJErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_massjerr2");

                    b.Property<int>("PlMassJLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_massjlim");

                    b.Property<float>("PlMasse")
                        .HasColumnType("real")
                        .HasColumnName("Pl_masse");

                    b.Property<float>("PlMasseErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_masseerr1");

                    b.Property<float>("PlMasseErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_masseerr2");

                    b.Property<int>("PlMasseLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_masselim");

                    b.Property<float>("PlMsiniE")
                        .HasColumnType("real")
                        .HasColumnName("Pl_msinie");

                    b.Property<float>("PlMsiniEErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_msinieerr1");

                    b.Property<float>("PlMsiniEErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_msinieerr2");

                    b.Property<int>("PlMsiniELim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_msinielim");

                    b.Property<float>("PlMsiniJ")
                        .HasColumnType("real")
                        .HasColumnName("Pl_msinij");

                    b.Property<float>("PlMsiniJErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_msinijerr1");

                    b.Property<float>("PlMsiniJErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_msinijerr2");

                    b.Property<int>("PlMsiniJLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_msinijlim");

                    b.Property<string>("PlName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pl_name");

                    b.Property<int>("PlNdispec")
                        .HasColumnType("int")
                        .HasColumnName("Pl_ndispec");

                    b.Property<int>("PlNespec")
                        .HasColumnType("int")
                        .HasColumnName("Pl_nespec");

                    b.Property<int>("PlNnotes")
                        .HasColumnType("int")
                        .HasColumnName("Pl_nnotes");

                    b.Property<int>("PlNtranspec")
                        .HasColumnType("int")
                        .HasColumnName("Pl_ntranspec");

                    b.Property<float>("PlOccdep")
                        .HasColumnType("real")
                        .HasColumnName("Pl_occdep");

                    b.Property<float>("PlOccdepErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_occdeperr1");

                    b.Property<float>("PlOccdepErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_occdeperr2");

                    b.Property<int>("PlOccdepLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_occdeplim");

                    b.Property<float>("PlOrbEccen")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbeccen");

                    b.Property<float>("PlOrbEccenErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbeccenerr1");

                    b.Property<float>("PlOrbEccenErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbeccenerr2");

                    b.Property<float>("PlOrbPer")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbper");

                    b.Property<float>("PlOrbPerErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbpererr1");

                    b.Property<float>("PlOrbPerErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbpererr2");

                    b.Property<int>("PlOrbPerLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_orbperlim");

                    b.Property<float>("PlOrbSmax")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbsmax");

                    b.Property<float>("PlOrbSmaxErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbsmaxerr1");

                    b.Property<float>("PlOrbSmaxErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbsmaxerr2");

                    b.Property<int>("PlOrbSmaxLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_orbsmaxlim");

                    b.Property<int>("PlOrbeccenLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_orbeccenlim");

                    b.Property<float>("PlOrbincl")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbincl");

                    b.Property<float>("PlOrbinclErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbinclerr1");

                    b.Property<float>("PlOrbinclErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbinclerr2");

                    b.Property<int>("PlOrbinclLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_orbincllim");

                    b.Property<float>("PlOrblper")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orblper");

                    b.Property<float>("PlOrblperErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orblpererr1");

                    b.Property<float>("PlOrblperErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orblpererr2");

                    b.Property<int>("PlOrblperLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_orblperlim");

                    b.Property<float>("PlOrbtper")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbtper");

                    b.Property<float>("PlOrbtperErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbtpererr1");

                    b.Property<float>("PlOrbtperErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_orbtpererr2");

                    b.Property<int>("PlOrbtperLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_orbtperlim");

                    b.Property<float>("PlProjobliq")
                        .HasColumnType("real")
                        .HasColumnName("Pl_projobliq");

                    b.Property<float>("PlProjobliqErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_projobliqerr1");

                    b.Property<float>("PlProjobliqErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_projobliqerr2");

                    b.Property<int>("PlProjobliqLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_projobliqlim");

                    b.Property<DateTime>("PlPubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("Pl_pubdate");

                    b.Property<float>("PlRadJ")
                        .HasColumnType("real")
                        .HasColumnName("Pl_radj");

                    b.Property<float>("PlRadJErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_radjerr1");

                    b.Property<float>("PlRadJErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_radjerr2");

                    b.Property<int>("PlRadJLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_radjlim");

                    b.Property<float>("PlRade")
                        .HasColumnType("real")
                        .HasColumnName("Pl_rade");

                    b.Property<float>("PlRadeErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_radeerr1");

                    b.Property<float>("PlRadeErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_radeerr2");

                    b.Property<int>("PlRadeLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_radelim");

                    b.Property<float>("PlRatdor")
                        .HasColumnType("real")
                        .HasColumnName("Pl_ratdor");

                    b.Property<float>("PlRatdorErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_ratdorerr1");

                    b.Property<float>("PlRatdorErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_ratdorerr2");

                    b.Property<int>("PlRatdorLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_ratdorlim");

                    b.Property<float>("PlRatror")
                        .HasColumnType("real")
                        .HasColumnName("Pl_ratror");

                    b.Property<float>("PlRatrorErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_ratrorerr1");

                    b.Property<float>("PlRatrorErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_ratrorerr2");

                    b.Property<int>("PlRatrorLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_ratrorlim");

                    b.Property<string>("PlRefName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pl_refname");

                    b.Property<float>("PlRvamp")
                        .HasColumnType("real")
                        .HasColumnName("Pl_rvamp");

                    b.Property<float>("PlRvampErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_rvamperr1");

                    b.Property<float>("PlRvampErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_rvamperr2");

                    b.Property<int>("PlRvampLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_rvamplim");

                    b.Property<float>("PlTrandep")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trandep");

                    b.Property<float>("PlTrandepErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trandeperr1");

                    b.Property<float>("PlTrandepErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trandeperr2");

                    b.Property<int>("PlTrandepLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_trandeplim");

                    b.Property<float>("PlTrandur")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trandur");

                    b.Property<float>("PlTrandurErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trandurerr1");

                    b.Property<float>("PlTrandurErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trandurerr2");

                    b.Property<int>("PlTrandurLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_trandurlim");

                    b.Property<float>("PlTranmid")
                        .HasColumnType("real")
                        .HasColumnName("Pl_tranmid");

                    b.Property<float>("PlTranmidErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_tranmiderr1");

                    b.Property<float>("PlTranmidErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_tranmiderr2");

                    b.Property<int>("PlTranmidLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_tranmidlim");

                    b.Property<float>("PlTrueobliq")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trueobliq");

                    b.Property<float>("PlTrueobliqErr1")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trueobliqerr1");

                    b.Property<float>("PlTrueobliqErr2")
                        .HasColumnType("real")
                        .HasColumnName("Pl_trueobliqerr2");

                    b.Property<int>("PlTrueobliqLim")
                        .HasColumnType("int")
                        .HasColumnName("Pl_trueobliqlim");

                    b.Property<string>("PlTsystemref")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pl_tsystemref");

                    b.Property<int>("PtvFlag")
                        .HasColumnType("int")
                        .HasColumnName("Ptv_flag");

                    b.Property<int>("PulFlag")
                        .HasColumnType("int")
                        .HasColumnName("Pul_flag");

                    b.Property<float>("Ra")
                        .HasColumnType("real")
                        .HasColumnName("Ra");

                    b.Property<string>("Rastr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Rastr");

                    b.Property<DateTime>("Releasedate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("Releasedate");

                    b.Property<DateTime>("Rowupdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified))
                        .HasColumnName("Rowupdate");

                    b.Property<int>("RvFlag")
                        .HasColumnType("int")
                        .HasColumnName("Rv_flag");

                    b.Property<string>("SolType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Soltype");

                    b.Property<float>("StAge")
                        .HasColumnType("real")
                        .HasColumnName("St_age");

                    b.Property<float>("StAgeErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_ageerr1");

                    b.Property<float>("StAgeErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_ageerr2");

                    b.Property<int>("StAgeLim")
                        .HasColumnType("int")
                        .HasColumnName("St_agelim");

                    b.Property<float>("StDens")
                        .HasColumnType("real")
                        .HasColumnName("St_dens");

                    b.Property<float>("StDensErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_denserr1");

                    b.Property<float>("StDensErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_denserr2");

                    b.Property<int>("StDensLim")
                        .HasColumnType("int")
                        .HasColumnName("St_denslim");

                    b.Property<float>("StLogg")
                        .HasColumnType("real")
                        .HasColumnName("St_logg");

                    b.Property<float>("StLoggErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_loggerr1");

                    b.Property<float>("StLoggErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_loggerr2");

                    b.Property<int>("StLoggLim")
                        .HasColumnType("int")
                        .HasColumnName("St_logglim");

                    b.Property<float>("StLum")
                        .HasColumnType("real")
                        .HasColumnName("St_lum");

                    b.Property<float>("StLumErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_lumerr1");

                    b.Property<float>("StLumErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_lumerr2");

                    b.Property<int>("StLumLim")
                        .HasColumnType("int")
                        .HasColumnName("St_lumlim");

                    b.Property<float>("StMass")
                        .HasColumnType("real")
                        .HasColumnName("St_mass");

                    b.Property<float>("StMassErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_masserr1");

                    b.Property<float>("StMassErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_masserr2");

                    b.Property<int>("StMassLim")
                        .HasColumnType("int")
                        .HasColumnName("St_masslim");

                    b.Property<float>("StMet")
                        .HasColumnType("real")
                        .HasColumnName("St_met");

                    b.Property<float>("StMetErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_meterr1");

                    b.Property<float>("StMetErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_meterr2");

                    b.Property<int>("StMetLim")
                        .HasColumnType("int")
                        .HasColumnName("St_metlim");

                    b.Property<string>("StMetratio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("St_metratio");

                    b.Property<int>("StNphot")
                        .HasColumnType("int")
                        .HasColumnName("St_nphot");

                    b.Property<int>("StNrvc")
                        .HasColumnType("int")
                        .HasColumnName("St_nrvc");

                    b.Property<int>("StNspec")
                        .HasColumnType("int")
                        .HasColumnName("St_nspec");

                    b.Property<float>("StRad")
                        .HasColumnType("real")
                        .HasColumnName("St_rad");

                    b.Property<float>("StRadErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_raderr1");

                    b.Property<float>("StRadErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_raderr2");

                    b.Property<int>("StRadLim")
                        .HasColumnType("int")
                        .HasColumnName("St_radlim");

                    b.Property<float>("StRadv")
                        .HasColumnType("real")
                        .HasColumnName("St_radv");

                    b.Property<float>("StRadvErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_radverr1");

                    b.Property<float>("StRadvErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_radverr2");

                    b.Property<int>("StRadvLim")
                        .HasColumnType("int")
                        .HasColumnName("St_radvlim");

                    b.Property<string>("StRefname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("St_refname");

                    b.Property<float>("StRotp")
                        .HasColumnType("real")
                        .HasColumnName("St_rotp");

                    b.Property<float>("StRotpErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_rotperr1");

                    b.Property<float>("StRotpErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_rotperr2");

                    b.Property<int>("StRotpLim")
                        .HasColumnType("int")
                        .HasColumnName("St_rotplim");

                    b.Property<string>("StSpectype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("St_spectype");

                    b.Property<float>("StTeff")
                        .HasColumnType("real")
                        .HasColumnName("St_teff");

                    b.Property<float>("StTeffErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_tefferr1");

                    b.Property<float>("StTeffErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_tefferr2");

                    b.Property<int>("StTeffLim")
                        .HasColumnType("int")
                        .HasColumnName("St_tefflim");

                    b.Property<float>("StVsin")
                        .HasColumnType("real")
                        .HasColumnName("St_vsin");

                    b.Property<float>("StVsinErr1")
                        .HasColumnType("real")
                        .HasColumnName("St_vsinerr1");

                    b.Property<float>("StVsinErr2")
                        .HasColumnType("real")
                        .HasColumnName("St_vsinerr2");

                    b.Property<int>("StVsinLim")
                        .HasColumnType("int")
                        .HasColumnName("St_vsinlim");

                    b.Property<float>("SyBmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_bmag");

                    b.Property<float>("SyBmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_bmagerr1");

                    b.Property<float>("SyBmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_bmagerr2");

                    b.Property<float>("SyDist")
                        .HasColumnType("real")
                        .HasColumnName("Sy_dist");

                    b.Property<float>("SyDistErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_disterr1");

                    b.Property<float>("SyDistErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_disterr2");

                    b.Property<float>("SyGaiaMag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_gaiamag");

                    b.Property<float>("SyGaiamagerr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_gaiamagerr1");

                    b.Property<float>("SyGaiamagerr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_gaiamagerr2");

                    b.Property<float>("SyGmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_gmag");

                    b.Property<float>("SyGmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_gmagerr1");

                    b.Property<float>("SyGmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_gmagerr2");

                    b.Property<float>("SyHmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_hmag");

                    b.Property<float>("SyHmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_hmagerr1");

                    b.Property<float>("SyHmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_hmagerr2");

                    b.Property<float>("SyIcmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_icmag");

                    b.Property<float>("SyIcmagerr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_icmagerr1");

                    b.Property<float>("SyIcmagerr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_icmagerr2");

                    b.Property<float>("SyImag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_imag");

                    b.Property<float>("SyImagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_imagerr1");

                    b.Property<float>("SyImagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_imagerr2");

                    b.Property<float>("SyJmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_jmag");

                    b.Property<float>("SyJmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_jmagerr1");

                    b.Property<float>("SyJmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_jmagerr2");

                    b.Property<float>("SyKepmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_kepmag");

                    b.Property<float>("SyKepmagerr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_kepmagerr1");

                    b.Property<float>("SyKepmagerr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_kepmagerr2");

                    b.Property<float>("SyKmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_kmag");

                    b.Property<float>("SyKmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_kmagerr1");

                    b.Property<float>("SyKmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_kmagerr2");

                    b.Property<int>("SyMnum")
                        .HasColumnType("int")
                        .HasColumnName("Sy_mnum");

                    b.Property<float>("SyPlx")
                        .HasColumnType("real")
                        .HasColumnName("Sy_plx");

                    b.Property<float>("SyPlxErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_plxerr1");

                    b.Property<float>("SyPlxErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_plxerr2");

                    b.Property<float>("SyPm")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pm");

                    b.Property<float>("SyPmDec")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmdec");

                    b.Property<float>("SyPmDecErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmdecerr1");

                    b.Property<float>("SyPmDecErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmdecerr2");

                    b.Property<float>("SyPmErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmerr1");

                    b.Property<float>("SyPmErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmerr2");

                    b.Property<float>("SyPmRa")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmra");

                    b.Property<float>("SyPmRaErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmraerr1");

                    b.Property<float>("SyPmRaErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_pmraerr2");

                    b.Property<int>("SyPnum")
                        .HasColumnType("int")
                        .HasColumnName("Sy_pnum");

                    b.Property<string>("SyRefName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Sy_refname");

                    b.Property<float>("SyRmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_rmag");

                    b.Property<float>("SyRmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_rmagerr1");

                    b.Property<float>("SyRmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_rmagerr2");

                    b.Property<int>("SySnum")
                        .HasColumnType("int")
                        .HasColumnName("Sy_snum");

                    b.Property<float>("SyTmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_tmag");

                    b.Property<float>("SyTmagerr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_tmagerr1");

                    b.Property<float>("SyTmagerr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_tmagerr2");

                    b.Property<float>("SyUmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_umag");

                    b.Property<float>("SyUmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_umagerr1");

                    b.Property<float>("SyUmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_umagerr2");

                    b.Property<float>("SyVmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_vmag");

                    b.Property<float>("SyVmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_vmagerr1");

                    b.Property<float>("SyVmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_vmagerr2");

                    b.Property<float>("SyW1mag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w1mag");

                    b.Property<float>("SyW1magErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w1magerr1");

                    b.Property<float>("SyW1magErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w1magerr2");

                    b.Property<float>("SyW2mag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w2mag");

                    b.Property<float>("SyW2magErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w2magerr1");

                    b.Property<float>("SyW2magErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w2magerr2");

                    b.Property<float>("SyW3mag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w3mag");

                    b.Property<float>("SyW3magErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w3magerr1");

                    b.Property<float>("SyW3magErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w3magerr2");

                    b.Property<float>("SyW4mag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w4mag");

                    b.Property<float>("SyW4magErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w4magerr1");

                    b.Property<float>("SyW4magErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_w4magerr2");

                    b.Property<float>("SyZmag")
                        .HasColumnType("real")
                        .HasColumnName("Sy_zmag");

                    b.Property<float>("SyZmagErr1")
                        .HasColumnType("real")
                        .HasColumnName("Sy_zmagerr1");

                    b.Property<float>("SyZmagErr2")
                        .HasColumnType("real")
                        .HasColumnName("Sy_zmagerr2");

                    b.Property<string>("TicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tic_id");

                    b.Property<int>("TranFlag")
                        .HasColumnType("int")
                        .HasColumnName("Tran_flag");

                    b.Property<int>("TtvFlag")
                        .HasColumnType("int")
                        .HasColumnName("Ttv_flag");

                    b.HasKey("RowId");

                    b.ToTable("NASAExoplanetCatalog", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.NGCICOpendatasoft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AngDiameter")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ang_Diameter");

                    b.Property<double?>("AppMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("App_Mag");

                    b.Property<string>("AppMagFlag")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("App_Mag_Flag");

                    b.Property<double?>("BMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("b_mag");

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CommonNames")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("Constellation")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<double?>("CstarBMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Cstar_BMag");

                    b.Property<string>("CstarNames")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("Cstar_Names");

                    b.Property<double?>("CstarUMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Cstar_UMag");

                    b.Property<double?>("CstarVMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Cstar_VMag");

                    b.Property<string>("DEC")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)")
                        .HasColumnName("DEC");

                    b.Property<string>("Declination")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Declination")
                        .HasComputedColumnSql("\r\n                ISNULL(CAST([Declination_D] AS varchar(10)), '') + '° ' + \r\n                ISNULL(CAST([Declination_M] AS varchar(10)), '') + ''' ' + \r\n                ISNULL(CAST([Declination_S] AS varchar(10)), '') + '\"'", true);

                    b.Property<int?>("DeclinationD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Declination_D");

                    b.Property<int?>("DeclinationM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Declination_M");

                    b.Property<double?>("DeclinationS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Declination_S");

                    b.Property<double?>("HMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("h_mag");

                    b.Property<string>("HubbleOnlyGalaxies")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("Hubble_OnlyGalaxies");

                    b.Property<string>("IC")
                        .HasMaxLength(23)
                        .HasColumnType("nvarchar(23)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<double?>("JMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("j_mag");

                    b.Property<double?>("KMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("k_mag");

                    b.Property<string>("LimitAngDiameter")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Limit_Ang_Diameter");

                    b.Property<double?>("MajorAxis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Messier")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("MinorAxis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("NGC")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("NGC_IC")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("NS")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<string>("Name_UK")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NedNotes")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<string>("ObjectTypeAbrev")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("ObjectTypeFull")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("Object_type");

                    b.Property<string>("OpenngcNotes")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Other_names");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PositionAngle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RA")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RightAscension")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Right_ascension")
                        .HasComputedColumnSql("\r\n                ISNULL(CAST([Right_ascension_H] AS varchar(10)), '') + 'h ' + \r\n                ISNULL(CAST([Right_ascension_M] AS varchar(10)), '') + 'm ' + \r\n                ISNULL(CAST([Right_ascension_S] AS varchar(10)), '') + 's'", true);

                    b.Property<int?>("RightAscensionH")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Right_ascension_H");

                    b.Property<int?>("RightAscensionM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Right_ascension_M");

                    b.Property<double?>("RightAscensionS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Right_ascension_S");

                    b.Property<string>("SourceType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Source_Type");

                    b.Property<string>("SubObject")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("SurfaceBrightness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Surface_Brigthness");

                    b.Property<double?>("VMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("v_mag");

                    b.HasKey("Id");

                    b.HasIndex("NGC_IC", "Name")
                        .IsUnique()
                        .HasDatabaseName("UNIQUE_NGC_IC_Name")
                        .HasFilter("[NGC_IC] IS NOT NULL AND [Name] IS NOT NULL");

                    b.ToTable("NGCICOpendatasoft", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.NGCICOpendatasoftExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AngDiameter")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ang_Diameter");

                    b.Property<double?>("AppMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("App_Mag");

                    b.Property<string>("AppMagFlag")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("App_Mag_Flag");

                    b.Property<double?>("BMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("b_mag");

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CommonNames")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("Constellation")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<double?>("CstarBMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Cstar_BMag");

                    b.Property<string>("CstarNames")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("Cstar_Names");

                    b.Property<double?>("CstarUMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Cstar_UMag");

                    b.Property<double?>("CstarVMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Cstar_VMag");

                    b.Property<string>("DEC")
                        .HasMaxLength(31)
                        .HasColumnType("nvarchar(31)")
                        .HasColumnName("DEC");

                    b.Property<string>("Declination")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Declination")
                        .HasComputedColumnSql("\r\n                ISNULL(CAST([Declination_D] AS varchar(10)), '') + '° ' + \r\n                ISNULL(CAST([Declination_M] AS varchar(10)), '') + ''' ' + \r\n                ISNULL(CAST([Declination_S] AS varchar(10)), '') + '\"'", true);

                    b.Property<int?>("DeclinationD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Declination_D");

                    b.Property<int?>("DeclinationM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Declination_M");

                    b.Property<double?>("DeclinationS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Declination_S");

                    b.Property<double?>("HMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("h_mag");

                    b.Property<string>("HubbleOnlyGalaxies")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("Hubble_OnlyGalaxies");

                    b.Property<string>("IC")
                        .HasMaxLength(23)
                        .HasColumnType("nvarchar(23)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<double?>("JMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("j_mag");

                    b.Property<double?>("KMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("k_mag");

                    b.Property<string>("LimitAngDiameter")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("Limit_Ang_Diameter");

                    b.Property<double?>("MajorAxis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Messier")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("MinorAxis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("NGC")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("NGC_IC")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("NS")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int?>("Name")
                        .HasColumnType("int")
                        .HasColumnName("Name");

                    b.Property<string>("Name_UK")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NedNotes")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<string>("ObjectTypeAbrev")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("ObjectTypeFull")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("Object_type");

                    b.Property<string>("OpenngcNotes")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Other_names");

                    b.Property<int?>("PositionAngle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RA")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RightAscension")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("Right_ascension")
                        .HasComputedColumnSql("\r\n                ISNULL(CAST([Right_ascension_H] AS varchar(10)), '') + 'h ' + \r\n                ISNULL(CAST([Right_ascension_M] AS varchar(10)), '') + 'm ' + \r\n                ISNULL(CAST([Right_ascension_S] AS varchar(10)), '') + 's'", true);

                    b.Property<int?>("RightAscensionH")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Right_ascension_H");

                    b.Property<int?>("RightAscensionM")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("Right_ascension_M");

                    b.Property<double?>("RightAscensionS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Right_ascension_S");

                    b.Property<string>("SourceType")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("Source_Type");

                    b.Property<string>("SubObject")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double?>("SurfaceBrightness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("Surface_Brigthness");

                    b.Property<double?>("VMag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("v_mag");

                    b.HasKey("Id");

                    b.ToTable("NGCICOpendatasoft_Extension", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.NLogApplicationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Controller")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Level")
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logger")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Scope")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_NLog");

                    b.ToTable("NLogApplicationCode", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.NameObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("NameObject", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.Services.RequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestLogs", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.Services.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlockedHeaders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastRequestTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxRequests")
                        .HasColumnType("int");

                    b.Property<string>("OsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Referer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestTimeUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("SYSDATETIME()");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<int>("TimeWindowMinutes")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLogs", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.SourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("Count")
                        .HasColumnType("int")
                        .HasColumnName("Count");

                    b.Property<string>("Meaning")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SourceType", (string)null);
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Astronomic_Catalogs.Models.AspNetRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Astronomic_Catalogs.Models.AspNetUser", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Astronomic_Catalogs.Models.AspNetUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserRole", b =>
                {
                    b.HasOne("Astronomic_Catalogs.Models.AspNetRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astronomic_Catalogs.Models.AspNetUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Astronomic_Catalogs.Models.AspNetUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Astronomic_Catalogs.Models.AspNetUser", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
